generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())

  email    String  @unique
  login    String? @unique
  password String
  emailVerified DateTime? @map("email_verified") @db.Date
  avatarPath String  @default("/uploads/avatar/avatar-default.png") @map("avatar_path")
  surname    String?
  role       Role    @default(CLIENT)
  isAdmin    Boolean @default(false)
  address    Json?
  favorites  Product[]
  reviews    Review[]
  Account    Account[]
  Session    Session[]
  createdAt DateTime @default(now()) @map("created_at") @db.Date
  updatedAt DateTime @updatedAt @map("updated_at") @db.Date
  @@map("users")
}

enum Role {
  CLIENT
  ADMIN
}

model Product {
  id        Int      @id @default(autoincrement())


  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]
  countOpened Int @default(0) @map("count_opened")
  isSendTelegram Boolean @default(false) @map("is_send_telegram")
  reviews     Review[]

  client   User? @relation(fields: [clientId], references: [id])
  clientId Int?
    createdAt DateTime @default(now()) @map("created_at") @db.Date
    updatedAt DateTime @updatedAt @map("updated_at") @db.Date
}

model Review {
  id        Int      @id @default(autoincrement())

  text   String
  rating Int

  productId Int      @map("product_id")
  Product   Product? @relation(fields: [productId], references: [id])

  client   User? @relation(fields: [clientId], references: [id])
  clientId Int?
    createdAt DateTime @default(now()) @map("created_at") @db.Date
    updatedAt DateTime @updatedAt @map("updated_at") @db.Date
}

model Account {
  userId Int @id

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
